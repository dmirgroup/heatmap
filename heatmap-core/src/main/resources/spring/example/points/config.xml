<?xml version="1.0" encoding="UTF-8"?>
<beans 
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!--Loading properties. -->
	<bean class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>#{systemProperties.workdir}/config.default.properties</value>
				<value>#{systemProperties.workdir}/config.properties</value>
			</list>
		</property>
		<property name="order" value="150" />
		<property name="ignoreUnresolvablePlaceholders" value="true" />
		<property name="ignoreResourceNotFound" value="true" />
	</bean>


	<!-- ############# Transaction management access. ############# -->

	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<!-- <tx:annotation-driven /> -->


	<!-- ############# MyBatis. ############# -->

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<property name="basePackage" value="
			de.uniwue.dmir.heatmap.impl.core.data.source.geo.database.mapper" />
	</bean>
	
	<!-- ############# Enable and use component scan. ############# -->

	<!-- Enable things like "@Autowired" and "@Component" annotations. -->
<!-- 	<context:annotation-config /> -->

	<!-- Recursively (!) scans the classpath of this application for @Components to deploy as beans. -->
<!-- 	<context:component-scan base-package="" /> -->
	
	<!-- ############# Data sources. ############# -->
	
	<bean id="dataSource"
			class="org.springframework.jdbc.datasource.DriverManagerDataSource">

		<property name="driverClassName"	value="${db.core.driver}" />
		<property name="url"				value="${db.core.url}" />
		<property name="username"			value="${db.core.user}" />
		<property name="password"			value="${db.core.password}" />
	</bean>











	
	<bean id="geoPolygon"
			class="de.uniwue.dmir.heatmap.core.util.GeoPolygonFactoryBean">
	
		<constructor-arg name="resource" value="classpath:spring/example/points/polygon-turin.json" />
	</bean>
	
	<bean id="tileSize"
			class ="de.uniwue.dmir.heatmap.core.util.EquidistantProjectionTileSizeFactoryBean">
	
		<constructor-arg name="widthMeters" value="10" />
		<constructor-arg name="heightMeters" value="10" />
		<constructor-arg name="northReference" value="false" />
		<constructor-arg name="geoBoundingBox" value="#{geoPolygon.geoBoundingBox}" />
		<constructor-arg name="distanceFunction">
			<bean class="de.uniwue.dmir.heatmap.impl.core.visualizer.rbf.GreatCircleDistance.Haversine" />
		</constructor-arg>
	</bean>

	<bean id="projection"
			class="de.uniwue.dmir.heatmap.impl.core.data.source.geo.EquidistantProjection">
	
		<constructor-arg name="geoBoundingBox" value="#{geoPolygon.geoBoundingBox}" />	
		<constructor-arg name="tileSize" ref="tileSize" />	
	</bean>
	
	<bean name="requestGeo" 
			class="de.uniwue.dmir.heatmap.impl.core.data.source.geo.database.RequestGeo">
		
		<constructor-arg name="table" value="data_airprobe" />
		<constructor-arg name="longitudeAttribute" value="geo_lon" />
		<constructor-arg name="latitudeAttribute" value="geo_lat" />
		
		<property name="lonWest" value="#{geoPolygon.geoBoundingBox.northWest.longitude}" />
		<property name="lonEast" value="#{geoPolygon.geoBoundingBox.southEast.longitude}" />
		<property name="latNorth" value="#{geoPolygon.geoBoundingBox.northWest.latitude}" />
		<property name="latSouth" value="#{geoPolygon.geoBoundingBox.southEast.latitude}" />
	
		<property name="timestampAttribute" value="meta_timestamp_recorded" />
		<property name="orderAsc" value="true" />
		<property name="groupAttribute" value="meta_install_id" />
		<property name="valueAttribute" value="data_bc_1" />
	</bean>
	
	<bean id="geoDatasource" 
			class="de.uniwue.dmir.heatmap.impl.core.data.source.geo.database.DatabaseGeoDataSource">
	
		<constructor-arg name="request" ref="requestGeo" />		
	</bean>
	
		
<!-- 	<bean id="geoDatasource"
			class="de.uniwue.dmir.heatmap.impl.core.data.source.geo.CsvGeoDataSource">
		<constructor-arg name="file" value="src/test/resources/test_london.txt" />
		<constructor-arg name="separator" value="," />
		<constructor-arg name="skipFirstLine" value="false" />
	</bean> -->
	
	<bean id="tileDatasource" 
			class="de.uniwue.dmir.heatmap.core.data.source.geo.GeoTileDataSource">
		
		<constructor-arg name="geoDataSource" ref="geoDatasource" />
		<constructor-arg name="projection" ref="projection" />
		<constructor-arg name="coordinateMapper">
			<bean class="de.uniwue.dmir.heatmap.impl.core.data.source.geo.GeoPointToGeoCoordinateMapper" />
		</constructor-arg>
		<constructor-arg name="externalDataMapper">
			<bean class="de.uniwue.dmir.heatmap.impl.core.data.source.geo.GeoPointToGroupValuePixelMapper" />
		</constructor-arg>
	</bean>
	
	<bean id="filter" 
			class="de.uniwue.dmir.heatmap.impl.core.filter.PointFilter">
		<constructor-arg name="pixelAccess">
			<bean class="de.uniwue.dmir.heatmap.impl.core.filter.MapPixelAccess" />
		</constructor-arg>
		<constructor-arg name="geoPolygon" ref="geoPolygon" />
		<constructor-arg name="tileSize" ref="tileSize" />	
	</bean>
	
	<bean id="tileFactory" 
			class="de.uniwue.dmir.heatmap.core.MapTileFactory" />

	<bean id="groupFilter"
			class="de.uniwue.dmir.heatmap.impl.core.filter.ProxyGroupFilter">
	
		<constructor-arg name="groupAccess">
			<bean class="de.uniwue.dmir.heatmap.impl.core.filter.MapGroupAccess">
				<constructor-arg name="tileFactory">
					<bean class="de.uniwue.dmir.heatmap.core.MapTileFactory" />
				</constructor-arg>
			</bean>
		</constructor-arg>
		
		<constructor-arg name="filter" ref="filter" />
	</bean>
	
	<bean id="zoomLevelRange"
			class="de.uniwue.dmir.heatmap.core.IHeatmap.ZoomLevelRange">
		<constructor-arg name="min" value="0" />
		<constructor-arg name="max" value="0" />
	</bean>

	<bean id="heatmapSettings"
			class="de.uniwue.dmir.heatmap.core.IHeatmap.HeatmapSettings" >
		<property name="zoomLevelRange" ref="zoomLevelRange" />
		<property name="tileSize" ref="tileSize" />
	</bean>
	
	<bean id="heatmap" 
			class="de.uniwue.dmir.heatmap.core.Heatmap">
	
		<constructor-arg name="tileFactory">
			<bean class="de.uniwue.dmir.heatmap.core.MapTileFactory2" />
		</constructor-arg>
		
		<constructor-arg name="dataSource" ref="tileDatasource" />
		<constructor-arg name="filter" ref="groupFilter" />
		<constructor-arg name="settings" ref="heatmapSettings" />
	</bean>
	
	<bean id="polygon"
			class="de.uniwue.dmir.heatmap.core.util.PolygonFromGeoPolygonFacoryBean">
		<constructor-arg name="geoPolygon" ref="geoPolygon" />
		<constructor-arg name="tileCoordinates">
			<null />
		</constructor-arg>
		<constructor-arg name="mapProjection" ref="projection" />
	</bean>
	
	<!-- Pixel iterator factory to filter out points outside the given polygon. -->
	<bean id="pixelIteratorFactory"
			class="de.uniwue.dmir.heatmap.core.processing.FilteredProxyKeyValueIteratorFactory">
			
		<constructor-arg name="factory">
			<bean class="de.uniwue.dmir.heatmap.impl.core.visualizer.MapKeyValueIteratorFactory" />
		</constructor-arg>
		
		<constructor-arg name="filter">
			<bean class="de.uniwue.dmir.heatmap.core.processing.FilteredProxyKeyValueIteratorFactory.CombinedKeyValueFilter">
				<constructor-arg name="keyFilter">
					<bean class="de.uniwue.dmir.heatmap.core.processing.PolygonRelativeCoordinatesFilter">
						<constructor-arg name="polygon" ref="polygon" />
					</bean>
				</constructor-arg>
			</bean>
		</constructor-arg>
	</bean>
	
	<!-- Point processor to calculate points for each group. -->
	<bean id="pointProcessor" 
			class="de.uniwue.dmir.heatmap.core.processing.PointProcessor" >
	
		<constructor-arg name="file" value="out/groups/point.json" />
		<constructor-arg name="hashAlgorithm" value="MD5" />
		<constructor-arg name="groupIteratorFactory">
			<bean class="de.uniwue.dmir.heatmap.impl.core.visualizer.MapKeyValueIteratorFactory" />
		</constructor-arg>
		<constructor-arg name="pixelIteratorFactory" ref="pixelIteratorFactory" />
	</bean>
	
	<!-- Preparing point visualizer. -->
	<bean id="colorImage"
			class="de.uniwue.dmir.heatmap.core.util.BufferedImageFactoryBean">

		<constructor-arg name="resource" value="classpath:color-schemes/classic.png" />
	</bean>
	
	<bean id="ranges"
			class="de.uniwue.dmir.heatmap.core.util.RangeFactoryBean">

		<constructor-arg name="min" value="1" />
		<constructor-arg name="max" value="48" />
		<constructor-arg name="image" ref="colorImage" />
	</bean>
	
	<bean id="simpleVisualizer"
			class="de.uniwue.dmir.heatmap.impl.core.visualizer.SimpleVisualizer">
			
		<constructor-arg name="pixelIteratorFactory" ref="pixelIteratorFactory" />

		<constructor-arg name="colorPipe">
			<bean class="de.uniwue.dmir.heatmap.impl.core.visualizer.colors.CombinedColorPipe">
				<constructor-arg name="colorPipe">
					<bean class="de.uniwue.dmir.heatmap.impl.core.visualizer.colors.SimpleColorPipe">
						<constructor-arg name="toDoubleMapper">
							<bean class="de.uniwue.dmir.heatmap.core.processing.PointSizeToPointsMapper" />
						</constructor-arg>
						<constructor-arg name="colorScheme">
							<bean class="de.uniwue.dmir.heatmap.impl.core.visualizer.ImageColorScheme" >
								<constructor-arg name="image" ref="colorImage" />
								<constructor-arg name="ranges" ref="ranges" />
							</bean> 
						</constructor-arg>
					</bean>
				</constructor-arg>
				<constructor-arg name="alphaPipe">
					<null />
				</constructor-arg>
			</bean>
		</constructor-arg>
	
	</bean>
	
	<bean id="visualizer" 
			class="de.uniwue.dmir.heatmap.impl.core.visualizer.StaticPolygonProxyVisualizer">
			
		<constructor-arg name="visualizer" ref="simpleVisualizer" />
		<constructor-arg name="polygon" ref="polygon" />
	</bean>
	
	<bean id="visualizationFileWriter"
			class="de.uniwue.dmir.heatmap.core.processing.VisualizationFileWriter">
			
		<constructor-arg name="parentFolder" value="not-needed" />
		<constructor-arg name="fileStrategy">
			<bean class="de.uniwue.dmir.heatmap.core.processing.DefaultFileStrategy" />
		</constructor-arg>
		<constructor-arg name="fileFormat" value="png" />
		<constructor-arg name="visualizer" ref="visualizer" />
	</bean>
	
	<bean id="groupProxyFileWriter" 
			class="de.uniwue.dmir.heatmap.core.processing.GroupProxyFileWriter">
		<constructor-arg name="groupIteratorFactory">
			<bean class="de.uniwue.dmir.heatmap.impl.core.visualizer.MapKeyValueIteratorFactory" />
		</constructor-arg>
		<constructor-arg name="fileWriter" ref="visualizationFileWriter" />
		<constructor-arg name="parentFolder" value="out/points/new" />
	</bean>
	
	<bean id="writer"
			class="de.uniwue.dmir.heatmap.core.processing.ProxyTileProcessor">
		<constructor-arg name="processors">
			<list>
				<ref bean="pointProcessor" />
				<ref bean="groupProxyFileWriter" />
			</list>
		</constructor-arg>
	</bean>

</beans>